syntax = "proto3";

package henkenclub.account;

/* common */

// Basic User Info
message User {
  string id = 1;
  string alias = 2;
  optional string display_name = 3;
}

// Auth Tokens pair
message TokensPair {
  string access_token = 1;
  string refresh_token = 2;
}

service Account {
  // GetUser
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
}

// GetUser
message GetUserRequest {
  oneof where {
    string id = 1;
    string alias = 2;
  }
}
message GetUserResponse {
  User user = 1;
}

service Auth {
  /* User registration */

  // sign up
  rpc Signup(SignupRequest) returns (SignupResponse);

  // register user
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse);

  // resend verify email
  rpc ResendVerifyEmail(ResendVerifyEmailRequest)
      returns (ResendVerifyEmailResponse);

  /* User auth */

  // sign in
  rpc Signin(SigninRequest) returns (SigninResponse);

  // refresh access token
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);

  // verify access token
  rpc VerifyToken(VerifyTokenRequest) returns (VerifyTokenResponse);
}

// SignUp
message SignupRequest {
  string password = 1;
  string email = 2;
  string alias = 3;
  optional string display_name = 4;
}

message SignupResponse {
  message RegisterPair {
    string verify_code = 1;
    string register_token = 2;
  }

  message Error {
    enum Detail {
      INVALID = 0;
      DUPLICATED_EMAIL = 1;
      DUPLICATED_ALIAS = 2;
    }
    repeated Detail details = 1;
  }

  oneof result {
    RegisterPair pair = 1;
    Error error = 2;
  }
}

// Register User
message ResendVerifyEmailRequest {
  string register_token = 1;
}

message ResendVerifyEmailResponse {
  string verify_code = 1;
}

// Register User
message RegisterUserRequest {
  string verify_code = 1;
  string register_token = 2;
}

message RegisterUserResponse {
  TokensPair tokens = 1;
}

// SignIn
message SigninRequest {
  string password = 1;
  oneof name {
    string email = 2;
    string alias = 3;
  }
}
message SigninResponse {
  TokensPair tokens = 1;
}

// RefreshToken
message RefreshTokenRequest {
  string refresh_token = 1;
}
message RefreshTokenResponse {
  TokensPair tokens = 1;
}

// VerifyToken
message VerifyTokenRequest {
  string access_token = 1;
}
message VerifyTokenResponse {
  string user_id = 1;
}
